# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    containers_path: 'containers'
    templates_path: 'templates'
    locale: 'en'
    google_cloud_credentials: '%env(json:GOOGLE_APPLICATION_CREDENTIALS)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Provider\Github:
        arguments:
            $githubUser: '%env(CONFIG_GITHUB_USER)%'
            $githubRepo: '%env(CONFIG_GITHUB_REPO)%'
            $githubBranch: '%env(CONFIG_GITHUB_BRANCH)%'

    App\Provider\ContainerProvider:
        arguments:
            $path: '%containers_path%'

    App\Provider\TemplateProvider:
        arguments:
            $path: '%templates_path%'

    ZipArchive:
        class: \ZipArchive
        factory: [App\Factory\ZipArchiveFactory, 'createService']

    League\OAuth2\Client\Provider\Github:
        factory: [App\Factory\GithubOAuthFactory, 'createService']
        arguments:
            $clientId: '%env(GITHUB_APP_ID)%'
            $clientSecret: '%env(GITHUB_APP_SECRET)%'

    App\Controller\Exception:
        public: true
        arguments:
            $debug: '%kernel.debug%'
